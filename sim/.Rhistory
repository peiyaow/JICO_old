Y.list = list(Y1, Y2)
## Enumerate the combinations of hyperparameters to be tuned in a list:
cv.parameter.set <- list()
for(rankA1 in 1:cv.maxrank)
for(rankA2 in 1:cv.maxrank)
for (rankJ in 1:cv.maxrank){
cv.parameter.set = list.append(cv.parameter.set, list(rankA = c(rankA1, rankA2), rankJ = rankJ, gam = cv.gamma))
}
cv.parameter.set <- list()
for(rankA in 1:cv.maxrank)
for (rankJ in 1:cv.maxrank){
cv.parameter.set = list.append(cv.parameter.set, list(rankA = rep(rankA, G), rankJ = rankJ, gam = cv.gamma))
}
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, lambda = 0, parameter.set = cv.parameter.set,
criteria =  "1se", nfold = 5, maxiter = 100, orthIndiv = F)
cv.gamma = 1e12                               # the gamma used when tuning
##==============Model fitting example==============
# fitting oracle
ml.JICO = continuum.multigroup.iter(X.list, Y.list, lambda = 0, maxiter = 300, gam = gam, rankJ = 1, rankA = c(1, 1),
center.X = F, scale.X = F, center.Y = F, scale.Y = F, orthIndiv = F)
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, lambda = 0, parameter.set = cv.parameter.set,
criteria =  "1se", nfold = 5, maxiter = 100, orthIndiv = F)
cv.parameter.set
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, lambda = 0, parameter.set = cv.parameter.set,
criteria =  "1se", nfold = 5, maxiter = 100,
center.X = F, scale.X = F, center.Y = F, scale.Y = F, orthIndiv = F)
debugSource('~/Documents/GitHub/continuum/function/JICO.R')
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, lambda = 0, parameter.set = cv.parameter.set,
criteria =  "1se", nfold = 5, maxiter = 100,
center.X = F, scale.X = F, center.Y = F, scale.Y = F, orthIndiv = F)
rMSE
MSE
MSEsd = apply(MSE, 2, function(x) sd(sqrt(x)))/sqrt(nfolds)
MSEsd
rMSE = apply(MSE, c(1,2), function(x) mean(sqrt(x)))
rMSE
rMSE
rMSE = apply(MSE, 2, function(x) mean(sqrt(x)))
rMSE
absBest = min(rMSE)
MSEsd = apply(MSE, 2, function(x) sd(sqrt(x)))/sqrt(nfolds)
print(length(rMSE))
ix = min(which((rMSE - MSEsd) < absBest))
which((rMSE - MSEsd) < absBest)
matrix(rMSE)
rMSE.mtx = matrix(rMSE, byrow = T)
rMSE.mtx
# ix = min(which((rMSE - MSEsd) < absBest))
# parameter = parameter.set[[ix]]
L = length(rMSE)
rMSE.mtx = matrix(rMSE, ncol = L, byrow = T)
rMSE.mtx
which.min(rMSE.mtx)
#    print(absBest.ix)
#    absBest.row.ix = (absBest.ix-1)%%(nrow(rMSE.mtx))+1
col.ix = ceiling(absBest.ix/nrow(rMSE.mtx))
absBest.ix = which.min(rMSE.mtx)
absBest.ix
#    print(absBest.ix)
#    absBest.row.ix = (absBest.ix-1)%%(nrow(rMSE.mtx))+1
col.ix = ceiling(absBest.ix/nrow(rMSE.mtx))
col.ix
parameter.set
MSE
parameter.set
cv.parameter.set <- list()
for(rankA in 1:cv.maxrank)
for (rankJ in 1:cv.maxrank){
for (gam in c(1, cv.gamma))
cv.parameter.set = list.append(cv.parameter.set, list(rankA = rep(rankA, G), rankJ = rankJ, gam = cv.gamma))
}
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, lambda = 0, parameter.set = cv.parameter.set,
criteria =  "1se", nfold = 5, maxiter = 100,
center.X = F, scale.X = F, center.Y = F, scale.Y = F, orthIndiv = F)
debugSource('~/Documents/GitHub/continuum/function/JICO.R')
library(pls)
library(caret)
library(glmnet)
library(methods)
source("~/Documents/GitHub/continuum/function/JICO.R")
##==============Define the parameters for this toy example==============
G = 2                                         # Number of groups
n1 = 50                                       # sample size of the first group
n2 = 50                                       # sample size of the second group
n = n1 + n2                                   # sample size of all the data
p = 200                                       # dimension of the data
r = 1                                         # rank of the joint structure
r1 = 1                                        # rank of the 1st individual structure
r2 = 1                                        # rank of the 2nd individual structure
gam = 1e12                                    # infinity value for PCR model, set gam=0 for OLS model, gam=0.5 for PLS model, gam >= 1e10 for PCR model
cv.maxrank = 2                                # the maximum rank for joint and individual matrices when tuning
cv.gamma = 1e12                               # the gamma used when tuning
alpha = rep(1, r)                             # underlying true coefficient of the joint structure
alpha1 = rep(1, r1)                           # underlying true coefficient of the 1st individual structure
alpha2 = rep(1, r2)                           # underlying true coefficient of the 2nd individual structure
##==============Generate the data==============
X1 = mvrnorm(n1, rep(0, p), diag(p))          # Generate the observed covariate matrix of the first group
X2 = mvrnorm(n2, rep(0, p), diag(p))          # Generate the observed covariate matrix of the second group
X = rbind(X1, X2)
X.list = list(X1, X2)
V = matrix(svd(X)$v[,1:r], ncol = r)%*%rep(1/sqrt(r), r)                              # Use svd to generate the underlying true w in the joint model
V1 = matrix(svd(X1%*%(diag(p) - V%*%t(V)))$v[,1:r1], ncol = r1)%*%rep(1/sqrt(r1), r1) # Use svd to generate the underlying true w in the 1st individual model
V2 = matrix(svd(X2%*%(diag(p) - V%*%t(V)))$v[,1:r2], ncol = r2)%*%rep(1/sqrt(r2), r2) # Use svd to generate the underlying true w in the 2nd individual model
e1 = rnorm(n1)*.2                             # Generate the error vector in the 1st group
Y1 = X1%*%V%*%alpha + X1%*%V1%*%alpha1 + e1   # Generate the response vector in the 1st group
e2 = rnorm(n2)*.2                             # Generate the error vector in the 2nd group
Y2 = X2%*%V%*%alpha + X2%*%V2%*%alpha2 + e2   # Generate the response vector in the 2nd group
Y = rbind(Y1, Y2)
Y.list = list(Y1, Y2)
##==============Rank selection through cross validation==============
## Enumerate the combinations of hyperparameters to be tuned in a list:
cv.parameter.set <- list()
for(rankA1 in 1:cv.maxrank)
for(rankA2 in 1:cv.maxrank)
for (rankJ in 1:cv.maxrank){
cv.parameter.set = list.append(cv.parameter.set, list(rankA = c(rankA1, rankA2), rankJ = rankJ, gam = cv.gamma))
}
cv.parameter.set <- list()
for(rankA in 1:cv.maxrank)
for (rankJ in 1:cv.maxrank){
for (gam in c(1, cv.gamma))
cv.parameter.set = list.append(cv.parameter.set, list(rankA = rep(rankA, G), rankJ = rankJ, gam = cv.gamma))
}
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, lambda = 0, parameter.set = cv.parameter.set,
criteria =  "1se", nfold = 5, maxiter = 100,
center.X = F, scale.X = F, center.Y = F, scale.Y = F, orthIndiv = F)
debugSource('~/Documents/GitHub/continuum/function/JICO.R')
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, lambda = 0, parameter.set = cv.parameter.set,
criteria =  "1se", nfold = 5, maxiter = 100,
center.X = F, scale.X = F, center.Y = F, scale.Y = F, orthIndiv = F)
##==============Model fitting example==============
# fitting oracle
ml.JICO = continuum.multigroup.iter(X.list, Y.list, lambda = 0, maxiter = 300, gam = gam, rankJ = 1, rankA = c(1, 1),
# center.X = F, scale.X = F, center.Y = F, scale.Y = F,
orthIndiv = F)
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, lambda = 0, parameter.set = cv.parameter.set,
criteria =  "1se", nfold = 5, maxiter = 100,
# center.X = F, scale.X = F, center.Y = F, scale.Y = F,
orthIndiv = F)
rMSE
MSE
parameter.set
cv.parameter.set
cv.parameter.set <- list()
for(rankA in 1:cv.maxrank)
for (rankJ in 1:cv.maxrank)
for (gam in c(1, cv.gamma)){
cv.parameter.set = list.append(cv.parameter.set, list(rankA = rep(rankA, G), rankJ = rankJ, gam = cv.gamma))
}
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, lambda = 0, parameter.set = cv.parameter.set,
criteria =  "1se", nfold = 5, maxiter = 100,
# center.X = F, scale.X = F, center.Y = F, scale.Y = F,
orthIndiv = F)
rMSE
matrix(rMSE, ncol = 2, byrow = F)
parameter.set
for (gam in c(1, cv.gamma))
for (gam in c(1, cv.gamma))
for(rankA in 1:cv.maxrank)
cv.parameter.set <- list()
for (gam in c(1, cv.gamma))
for(rankA in 1:cv.maxrank)
for (rankJ in 1:cv.maxrank){
cv.parameter.set = list.append(cv.parameter.set, list(rankA = rep(rankA, G), rankJ = rankJ, gam = gam))
}
cv.parameter.set
cv.parameter.set <- list()
for (gam in c(1, cv.gamma))
for(rankA in 1:cv.maxrank)
for (rankJ in 1:cv.maxrank){
cv.parameter.set = list.append(cv.parameter.set, list(rankA = rep(rankA, G), rankJ = rankJ, gam = gam))
}
cv.parameter.set
cv.parameter.set <- list()
for (gam in c(1, cv.gamma))
for(rankA in 1:cv.maxrank)
for (rankJ in 1:cv.maxrank){
cv.parameter.set = list.append(cv.parameter.set, list(rankA = rep(rankA, G), rankJ = rankJ, gam = gam))
}
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, lambda = 0, parameter.set = cv.parameter.set,
criteria =  "1se", nfold = 5, maxiter = 100,
# center.X = F, scale.X = F, center.Y = F, scale.Y = F,
orthIndiv = F)
rMSE
parameter.set
rMSE
matrix(rMSE, ncol = 2, byrow = T)
matrix(rMSE, ncol = 2)
MSEsd
rMSE.mtx = matrix(rMSE, ncol = 2)
absBest.ix = which.min(rMSE.mtx)
absBest.ix
rMSE.mtx
#    print(absBest.ix)
#    absBest.row.ix = (absBest.ix-1)%%(nrow(rMSE.mtx))+1
col.ix = ceiling(absBest.ix/nrow(rMSE.mtx))
col.ix
#    print(col.ix)
row.ix = min(which((rMSE.mtx[, col.ix] - MSEsd[absBest.ix]) < absBest))
row.ix
rMSE.mtx[, col.ix]
MSEsd[absBest.ix]
rMSE.mtx
parameter.set
col.ix
ix
ix = col.ix + (row.ix-1)*(2)
ix
parameter = parameter.set[[ix]]
parameter.set
gam_list = c()
for (para in parameter.set){
gam_list = c(gam_list, para$gam)
}
source('~/Documents/GitHub/continuum/function/JICO.R')
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, lambda = 0, parameter.set = cv.parameter.set,
criteria =  "1se", nfold = 5, maxiter = 100,
# center.X = F, scale.X = F, center.Y = F, scale.Y = F,
orthIndiv = F)
cv.continnum.iter
cv.parameter.set
## Enumerate the combinations of hyperparameters to be tuned in a list:
cv.parameter.set <- list()
for(rankA1 in 1:cv.maxrank)
for(rankA2 in 1:cv.maxrank)
for (rankJ in 1:cv.maxrank){
cv.parameter.set = list.append(cv.parameter.set, list(rankA = c(rankA1, rankA2), rankJ = rankJ, gam = cv.gamma))
}
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, lambda = 0, parameter.set = cv.parameter.set,
criteria =  "1se", nfold = 5, maxiter = 100,
# center.X = F, scale.X = F, center.Y = F, scale.Y = F,
orthIndiv = F)
parameter.set.rankA_eq = function(G, cv.maxrankA, cv.maxrankJ, gamma.list){
cv.parameter.set <- list()
for (gam in gamma.list)
for(rankA in 1:cv.maxrankA)
for (rankJ in 1:cv.maxrankJ){
cv.parameter.set = list.append(cv.parameter.set, list(rankA = rep(rankA, G), rankJ = rankJ, gam = gam))
}
return(cv.parameter.set)
}
parameter.set.rankA_eq = function(G, cv.maxrankA, cv.maxrankJ, gamma.list){
cv.parameter.set <- list()
for (gam in gamma.list)
for(rankA in 0:cv.maxrankA)
for (rankJ in 0:cv.maxrankJ){
cv.parameter.set = list.append(cv.parameter.set, list(rankA = rep(rankA, G), rankJ = rankJ, gam = gam))
}
return(cv.parameter.set)
}
parameter.set.rankA_eq(2, 1, 1, c(1e12))
cv.maxrank
cv.maxrank = 1
cv.parameter.set = parameter.set.rankA_eq(G = 2, cv.maxrankA = cv.maxrank, cv.maxrankJ = cv.maxrank, gamma.list = c(1e12))
cv.parameter.set
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, lambda = 0, parameter.set = cv.parameter.set,
criteria =  "1se", nfold = 5, maxiter = 100,
# center.X = F, scale.X = F, center.Y = F, scale.Y = F,
orthIndiv = F)
print(paste0("The best parameters:"))
print(cv.ml.JICO$parameter)
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, lambda = 0, parameter.set = cv.parameter.set,
criteria =  "min", nfold = 5, maxiter = 100,
# center.X = F, scale.X = F, center.Y = F, scale.Y = F,
orthIndiv = F)
print(paste0("The best parameters:"))
print(cv.ml.JICO$parameter)
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, lambda = 0, parameter.set = cv.parameter.set,
criteria =  "1se", nfold = 5, maxiter = 100,
# center.X = F, scale.X = F, center.Y = F, scale.Y = F,
orthIndiv = F)
print(paste0("The best parameters:"))
print(cv.ml.JICO$parameter)
cv.continnum.iter
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, lambda = 0, parameter.set = cv.parameter.set,
criteria =  "1se", nfold = 5, maxiter = 100,
# center.X = F, scale.X = F, center.Y = F, scale.Y = F,
orthIndiv = F)
print(paste0("The best parameters:"))
print(cv.ml.JICO$parameter)
cv.parameter.set
cv.parameter.set = parameter.set.rankA_eq(G = 2, cv.maxrankA = cv.maxrank, cv.maxrankJ = cv.maxrank, gamma.list = c(1e12))
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, lambda = 0, parameter.set = cv.parameter.set,
criteria =  "1se", nfold = 5, maxiter = 100,
# center.X = F, scale.X = F, center.Y = F, scale.Y = F,
orthIndiv = F)
cv.ml.JICO
print(paste0("The best parameters:"))
print(cv.ml.JICO$parameter)
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, lambda = 0, parameter.set = cv.parameter.set,
criteria =  "min", nfold = 5, maxiter = 100,
# center.X = F, scale.X = F, center.Y = F, scale.Y = F,
orthIndiv = F)
print(paste0("The best parameters:"))
print(cv.ml.JICO$parameter)
cv.maxrank = 2                                # the maximum rank for joint and individual matrices when tuning
cv.gamma = 1e12                               # the gamma used when tuning
cv.parameter.set = parameter.set.rankA_eq(G = 2, cv.maxrankA = cv.maxrank, cv.maxrankJ = cv.maxrank, gamma.list = c(1e12))
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, lambda = 0, parameter.set = cv.parameter.set,
criteria =  "min", nfold = 5, maxiter = 100,
# center.X = F, scale.X = F, center.Y = F, scale.Y = F,
orthIndiv = F)
cv.parameter.set
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, lambda = 0, parameter.set = cv.parameter.set,
criteria =  "min", nfold = 5, maxiter = 100,
# center.X = F, scale.X = F, center.Y = F, scale.Y = F,
orthIndiv = F)
print(paste0("The best parameters:"))
print(cv.ml.JICO$parameter)
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, lambda = 0, parameter.set = cv.parameter.set,
criteria =  "min", nfold = 5, maxiter = 100,
center.X = F, scale.X = F, center.Y = F, scale.Y = F,
orthIndiv = F)
parameter.set.G_2 = function(cv.maxrank.A, cv.maxrank.J, cv.gamma){
cv.parameter.set <- list()
for(rankA1 in 0:cv.maxrank.A)
for(rankA2 in 0:cv.maxrank.A)
for (rankJ in 0:cv.maxrank.J){
cv.parameter.set = list.append(cv.parameter.set, list(rankA = c(rankA1, rankA2), rankJ = rankJ, gam = cv.gamma))
}
return(cv.parameter.set)
}
parameter.set.G_3 = function(cv.maxrank.A, cv.maxrank.J, cv.gamma){
cv.parameter.set <- list()
for(rankA1 in 0:cv.maxrank.A)
for(rankA2 in 0:cv.maxrank.A)
for (rankA3 in 0:cv.maxrank.A){
for (rankJ in 0:cv.maxrank.J){
cv.parameter.set = list.append(cv.parameter.set, list(rankA = c(rankA1, rankA2, rankA3), rankJ = rankJ, gam = cv.gamma))
}
}
return(cv.parameter.set)
}
cv.maxrank
parameter.set.G_2(cv.maxrankA = cv.maxrank, cv.maxrankJ = cv.maxrank, cv.gamma)
parameter.set.G_2 = function(cv.maxrank.A, cv.maxrank.J, cv.gamma){
cv.parameter.set <- list()
for(rankA1 in 0:cv.maxrank.A)
for(rankA2 in 0:cv.maxrank.A)
for (rankJ in 0:cv.maxrank.J){
cv.parameter.set = list.append(cv.parameter.set, list(rankA = c(rankA1, rankA2), rankJ = rankJ, gam = cv.gamma))
}
return(cv.parameter.set)
}
parameter.set.G_3 = function(cv.maxrank.A, cv.maxrank.J, cv.gamma){
cv.parameter.set <- list()
for(rankA1 in 0:cv.maxrank.A)
for(rankA2 in 0:cv.maxrank.A)
for (rankA3 in 0:cv.maxrank.A){
for (rankJ in 0:cv.maxrank.J){
cv.parameter.set = list.append(cv.parameter.set, list(rankA = c(rankA1, rankA2, rankA3), rankJ = rankJ, gam = cv.gamma))
}
}
return(cv.parameter.set)
}
parameter.set.rankA_eq = function(G, cv.maxrankA, cv.maxrankJ, gamma.list){
cv.parameter.set <- list()
for (gam in gamma.list)
for(rankA in 0:cv.maxrankA)
for (rankJ in 0:cv.maxrankJ){
cv.parameter.set = list.append(cv.parameter.set, list(rankA = rep(rankA, G), rankJ = rankJ, gam = gam))
}
return(cv.parameter.set)
}
cv.parameter.set = parameter.set.rankA_eq(G = 2, cv.maxrankA = cv.maxrank, cv.maxrankJ = cv.maxrank, gamma.list = c(1e12))
parameter.set.G_2(cv.maxrankA = cv.maxrank, cv.maxrankJ = cv.maxrank, cv.gamma)
cv.gamma
parameter.set.G_2(cv.maxrankA = cv.maxrank, cv.maxrankJ = cv.maxrank, cv.gamma = cv.gamma)
parameter.set.G_2 = function(cv.maxrankA, cv.maxrankJ, cv.gamma){
cv.parameter.set <- list()
for(rankA1 in 0:cv.maxrank.A)
for(rankA2 in 0:cv.maxrank.A)
for (rankJ in 0:cv.maxrank.J){
cv.parameter.set = list.append(cv.parameter.set, list(rankA = c(rankA1, rankA2), rankJ = rankJ, gam = cv.gamma))
}
return(cv.parameter.set)
}
parameter.set.G_3 = function(cv.maxrankA, cv.maxrankJ, cv.gamma){
cv.parameter.set <- list()
for(rankA1 in 0:cv.maxrankA)
for(rankA2 in 0:cv.maxrankA)
for (rankA3 in 0:cv.maxrankA){
for (rankJ in 0:cv.maxrank.J){
cv.parameter.set = list.append(cv.parameter.set, list(rankA = c(rankA1, rankA2, rankA3), rankJ = rankJ, gam = cv.gamma))
}
}
return(cv.parameter.set)
}
parameter.set.rankA_eq = function(G, cv.maxrankA, cv.maxrankJ, gamma.list){
cv.parameter.set <- list()
for (gam in gamma.list)
for(rankA in 0:cv.maxrankA)
for (rankJ in 0:cv.maxrankJ){
cv.parameter.set = list.append(cv.parameter.set, list(rankA = rep(rankA, G), rankJ = rankJ, gam = gam))
}
return(cv.parameter.set)
}
cv.parameter.set = parameter.set.rankA_eq(G = 2, cv.maxrankA = cv.maxrank, cv.maxrankJ = cv.maxrank, gamma.list = c(1e12))
parameter.set.G_2(cv.maxrankA = cv.maxrank, cv.maxrankJ = cv.maxrank, cv.gamma = cv.gamma)
parameter.set.G_2 = function(cv.maxrankA, cv.maxrankJ, cv.gamma){
cv.parameter.set <- list()
for(rankA1 in 0:cv.maxrankA)
for(rankA2 in 0:cv.maxrankA)
for (rankJ in 0:cv.maxrankJ){
cv.parameter.set = list.append(cv.parameter.set, list(rankA = c(rankA1, rankA2), rankJ = rankJ, gam = cv.gamma))
}
return(cv.parameter.set)
}
parameter.set.G_3 = function(cv.maxrankA, cv.maxrankJ, cv.gamma){
cv.parameter.set <- list()
for(rankA1 in 0:cv.maxrankA)
for(rankA2 in 0:cv.maxrankA)
for (rankA3 in 0:cv.maxrankA){
for (rankJ in 0:cv.maxrank.J){
cv.parameter.set = list.append(cv.parameter.set, list(rankA = c(rankA1, rankA2, rankA3), rankJ = rankJ, gam = cv.gamma))
}
}
return(cv.parameter.set)
}
parameter.set.rankA_eq = function(G, cv.maxrankA, cv.maxrankJ, gamma.list){
cv.parameter.set <- list()
for (gam in gamma.list)
for(rankA in 0:cv.maxrankA)
for (rankJ in 0:cv.maxrankJ){
cv.parameter.set = list.append(cv.parameter.set, list(rankA = rep(rankA, G), rankJ = rankJ, gam = gam))
}
return(cv.parameter.set)
}
cv.parameter.set = parameter.set.rankA_eq(G = 2, cv.maxrankA = cv.maxrank, cv.maxrankJ = cv.maxrank, gamma.list = c(1e12))
parameter.set.G_2(cv.maxrankA = cv.maxrank, cv.maxrankJ = cv.maxrank, cv.gamma = cv.gamma)
cv.maxrank = 1
parameter.set.G_2(cv.maxrankA = cv.maxrank, cv.maxrankJ = cv.maxrank, cv.gamma = cv.gamma)
cv.parameter.set = parameter.set.G_2(cv.maxrankA = cv.maxrank, cv.maxrankJ = cv.maxrank, cv.gamma = cv.gamma)
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, lambda = 0, parameter.set = cv.parameter.set,
criteria =  "min", nfold = 5, maxiter = 100,
center.X = F, scale.X = F, center.Y = F, scale.Y = F,
orthIndiv = F)
print(paste0("The best parameters:"))
print(cv.ml.JICO$parameter)
cv.parameter.set = parameter.set.G_2(cv.maxrankA = 2, cv.maxrankJ = cv.maxrank, cv.gamma = cv.gamma)
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, lambda = 0, parameter.set = cv.parameter.set,
criteria = "min", nfold = 5, maxiter = 100,
center.X = F, scale.X = F, center.Y = F, scale.Y = F,
orthIndiv = F)
cv.parameter.set = parameter.set.G_2(cv.maxrankA = cv.maxrank, cv.maxrankJ = 2, cv.gamma = cv.gamma)
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, lambda = 0, parameter.set = cv.parameter.set,
criteria = "min", nfold = 5, maxiter = 100,
center.X = F, scale.X = F, center.Y = F, scale.Y = F,
orthIndiv = F)
cv.parameter.set = parameter.set.G_2(cv.maxrankA = cv.maxrank, cv.maxrankJ = cv.maxrank, cv.gamma = cv.gamma)
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, lambda = 0, parameter.set = cv.parameter.set,
criteria = "min", nfold = 5, maxiter = 100,
center.X = F, scale.X = F, center.Y = F, scale.Y = F,
orthIndiv = F)
print(paste0("The best parameters:"))
print(cv.ml.JICO$parameter)
source('~/Documents/GitHub/continuum/function/JICO.R')
source('~/Documents/GitHub/continuum/function/JICO.R')
## Enumerate the combinations of hyperparameters to be tuned in a list:
cv.parameter.set = parameter.set.G_2(cv.maxrankA = cv.maxrank, cv.maxrankJ = cv.maxrank, cv.gamma = cv.gamma)
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, lambda = 0, parameter.set = cv.parameter.set,
criteria = "min", nfold = 5, maxiter = 100,
center.X = F, scale.X = F, center.Y = F, scale.Y = F,
orthIndiv = F)
print(paste0("The best parameters:"))
print(cv.ml.JICO$parameter)
##==============Model fitting example==============
# fitting oracle
ml.JICO = continuum.multigroup.iter(X.list, Y.list, lambda = 0, maxiter = 300, gam = gam, rankJ = 1, rankA = c(1, 1),
# center.X = F, scale.X = F, center.Y = F, scale.Y = F,
orthIndiv = F)
# predicted response value
Yhat.list = lapply(1:G, function(g) as.numeric(ml.JICO$intercept[[g]])+ X.list[[g]]%*%ml.JICO$beta.C[[g]] + X.list[[g]]%*%ml.JICO$beta.Cind[[g]])
##==============Model fitting example==============
# fitting oracle
ml.JICO = continuum.multigroup.iter(X.list, Y.list, lambda = 0, maxiter = 300, gam = gam, rankJ = 1, rankA = c(1, 1),
center.X = F, scale.X = F, center.Y = F, scale.Y = F,
orthIndiv = F)
# predicted response value
Yhat.list = lapply(1:G, function(g) as.numeric(ml.JICO$intercept[[g]])+ X.list[[g]]%*%ml.JICO$beta.C[[g]] + X.list[[g]]%*%ml.JICO$beta.Cind[[g]])
Yhat.list
##==============Model fitting example==============
# fitting oracle
ml.JICO = continuum.multigroup.iter(X.list, Y.list, lambda = 0, maxiter = 300, gam = gam, rankJ = r, rankA = c(r1, r2),
center.X = F, scale.X = F, center.Y = F, scale.Y = F,
orthIndiv = F)
